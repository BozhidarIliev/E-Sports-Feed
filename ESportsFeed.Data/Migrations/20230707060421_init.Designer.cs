// <auto-generated />
using System;
using ESportsFeed.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ESportsFeed.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230707060421_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ESportsFeed.Data.Models.Event", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("SportID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Market", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("MatchID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Match", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Odd", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MarketID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SpecialBetValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ID");

                    b.HasIndex("MarketID");

                    b.ToTable("Odds");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Sport", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Event", b =>
                {
                    b.HasOne("ESportsFeed.Data.Models.Sport", null)
                        .WithMany("Events")
                        .HasForeignKey("SportID");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Market", b =>
                {
                    b.HasOne("ESportsFeed.Data.Models.Match", null)
                        .WithMany("Markets")
                        .HasForeignKey("MatchID");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Match", b =>
                {
                    b.HasOne("ESportsFeed.Data.Models.Event", null)
                        .WithMany("Matches")
                        .HasForeignKey("EventID");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Odd", b =>
                {
                    b.HasOne("ESportsFeed.Data.Models.Market", null)
                        .WithMany("Odds")
                        .HasForeignKey("MarketID");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Event", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Market", b =>
                {
                    b.Navigation("Odds");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Match", b =>
                {
                    b.Navigation("Markets");
                });

            modelBuilder.Entity("ESportsFeed.Data.Models.Sport", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
